/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-10-09 16:36:15
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-10-10 03:09:46
**************************************************************/

class SkillLinkDataHelperDisplayView extends MasterHelperView {

	initialState : function () {
		var states = {};

		states['entities'] = this.getFilters();
		states['first'] = true;

		return states;
	}

	getFilters = function () {
		this._template.setReady(false);
		var self = this;
		var store = serviceLocator.get('ServiceManager').get('store_manager_main_service');
		var router = serviceLocator.get('Router');
		var skillLinkCollection = store.getCollection('SkillLink');
		var entity = this._template.getEntity();

		var skillLink = skillLinkCollection.filterByParentEntityRoute(entity);

		if (!Object.keys(skillLink).length) {
			store.request(router.entityRouteForApi(entity, 'skilllink'), {}, function (datas) {
				self._template.setReady(true);
				skillLink = skillLinkCollection.filterByParentEntityRoute(entity);
				self.setState({ entities : skillLink });
			});
		} else {
			this._template.setReady(true);
		}

		return skillLink;
	}

	displaySkillLinks : function (skillLinks) {
		var result = [];
		var limit = this._template.getLimit();
		var n = 0;

		for (var i in skillLinks) {
			var skilllink = skillLinks[i];
			if (!skilllink.getTarget())
				continue ;
			if (limit && limit < ++n)
				break ;
			var level = Math.round(skilllink.getLevel() / 100);
			var percent = skilllink.getLevel() % 100;
			var style = {
				'width' : percent +'%'
			};
			result.push(skilllink.displayTimeline());
		}

		return result;
	}
 
	display : function () {
		var entities = this.state['entities'];
		var className = '';

		if (this.state['first'])
			className = 'animate';

		return <div className={className}>
			{this.displaySkillLinks(entities)}
		</div>
	}
}